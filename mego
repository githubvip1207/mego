#!/bin/bash #########################################################################
# Author: (chenyu@1207.me)
# Created Time: 2015-01-07 02:16:16
# File Name: mego
# Description: 
#########################################################################

# 当您使用该工具，必须保证您的本地服务器bash在4.x以上版本，如果您是mac电脑，更新方法可以前往http://www.1207.me/archives/284.html

# 配置规则
# SERVER_CONFIGS[<SERVERNAME>]="<HOST> <PORT> <USER> <PASSWORD> <LEVEL> <PR_SERVER> <COMMAND>"
# LEVEL: public或private，主要是管理终端是否输出密码
# PR_SERVER: 当我们登录美国的某台服务器，但是从国内登录可能速度会很慢。此时我们就需要从国内登录一台某个高速着陆机，然后再从该机器上登录美国服务器。这个选项正式用做此，这里设置的值必须是存在与我们的配置中的某给服务器名
# COMMAND: 登录当前服务器后需要运行的命令

declare -A SERVER_CONFIGS
SERVER_CONFIGS['11']="10.0.0.11 22 zhangsan z123456 private '' 'cd /home && ls'"
SERVER_CONFIGS['12']="10.0.0.12 22 lisi l432145 private 12 ''"
SERVER_CONFIGS['13']="10.0.0.13 22 wangqi w987121 public '' ''"

function usage(){ 
    echo -e '===================================================================='
    echo -e 'opgo <hostName>\n'
    echo -e '  hostName: <11>\n'
    echo -e '===================================================================='
}

# 代码执行结果状态判断
# $1 必须是$?
# $2 如果执行失败输出的提示信息
function assertSuccess(){
    if [[ ${1} -ne 0 ]]; then
	echo "error: ${2}"; exit 1
    fi
}

# 返回指定配置类型的索引id
# $1 配置类型名
function getParamIndexByCurKey(){
    case "${1}" in
	'host') _index=0;;
	'port') _index=1;;
	'user') _index=2;;
	'pass') _index=3;;
	'leve') _index=4;;
	'jump') _index=5;;
	'comm') _index=6;;
	*)  exit 1;;
    esac
    echo ${_index}
}

# (废弃)返回当前方法的第$1+1个参数的值
# $1 需要的索引值
# $2.. 其他参数
function getParamByIndex(){
    _i=$[${1} + 2]
    if [[ ${_i} > ${#} ]];then
	exit 1
    fi
    eval _val=\${${_i}}
    echo ${_val}
}

# 返回指定服务器的指定配置属性值
# $1 配置中的服务器名
# $2 需要查询的配置类型名，值必须是host/port/user/pass/leve/jump/comm内
# echo $(c 206 pass)
function c(){
    _confInfo=${SERVER_CONFIGS[${1}]}
    if [ "${_confInfo}" == '' ];then
	echo "${1} config not found..."; exit 1
    fi
    _index=$(getParamIndexByCurKey ${2})
    assertSuccess $? "${2} undefined..."
    eval _confInfoObject="(${_confInfo})"

    _confVal=${_confInfoObject[${_index}]}
    #_confVal=$(getParamByIndex ${_index} ${_confInfo})
    assertSuccess $? "${1}->${2}(${_index}) undefined..."
    echo ${_confVal}
}

# 返回expect运行的代码
# $1 配置中的服务器名
function getRoute(){
    _firstRoute=''
    if [ "$(c ${1} jump)" != '' ];then
	_firstRoute=$(getRoute $(c ${1} jump))
    fi

    _command=''
    if [ "$(c ${1} comm)" != '' ];then
	_command="expect \"]*\"
	send \"$(c ${1} comm)\r\"
	"
    fi

    if [ "${_firstRoute}" == '' ];then
	echo "
	spawn ssh -p$(c ${1} port) $(c ${1} user)@$(c ${1} host)
	expect \"assword:\"
	send \"$(c ${1} pass)\r\"
	${_command}"
    else
	echo "${_firstRoute}
	expect \"]*\"
	send \"ssh -p$(c ${1} port) $(c ${1} user)@$(c ${1} host)\r\"
	expect \"assword:\"
	send \"$(c ${1} pass)\r\"
	${_command}"
    fi
}

function main(){
    if [ $(c ${1} leve) == 'public' ];then
	echo "--- ssh -p$(c ${1} port) $(c ${1} user)@$(c ${1} host) $(c ${1} pass) ---"
    else
	echo "--- ssh -p$(c ${1} port) $(c ${1} user)@$(c ${1} host) ---"
    fi

    expect -c "
	set timeout 30
	$(getRoute $1)
	interact"
}

case $# in
"1")
    main $1;;
*)
    usage;;
esac

# vim: set noexpandtab ts=4 sts=4 sw=4 :
